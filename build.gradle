buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.jetbrains.kotlin.jvm' version "${kotlin_plugin_version}"
}

apply plugin: 'org.spongepowered.mixin'



group = 'mod.chloeprime'
version = '0.0.1'

java {
    archivesBaseName = 'ElytraBooster'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    runs {
        client {
            jvmArgs += '-Dmixin.env.disableRefMap=true'
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'ElytraBooster'

            mods {
                elytrabooster {
                    source sourceSets.main
                }
            }
        }

        server {
            jvmArgs += '-Dmixin.env.disableRefMap=true'
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ElytraBooster'

            mods {
                elytrabooster {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ElytraBooster'

            mods {
                elytrabooster {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'elytrabooster', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                elytrabooster {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, 'mixins.elytra_booster.refmap.json'
    config 'mixins.elytra_booster.json'

    debug.verbose = true
    debug.export = true
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'lib'
    }
    mavenCentral()
    maven { url = "https://maven.theillusivec4.top/" }
    // kotlin
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }

    // JEI & MEK
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:1.18.1-3.0.0.2")
    compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:1.18.1-3.0.0.2:api")

    implementation 'thedarkcolour:kotlinforforge:3.7.1'
    minecraftLibrary group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlin_version
    minecraftLibrary group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: kotlin_version
    minecraftLibrary group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlin_version
    minecraftLibrary group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
    minecraftLibrary group: "org.jetbrains", name: "annotations", version: annotations_version
    minecraftLibrary group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
    minecraftLibrary group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
    // JEI仅用于验证配方是否正确，不参与编译。
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs = ['-Xjvm-default=all']
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "elytrabooster",
                //"Specification-Vendor": "elytrabooster authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                //"Implementation-Vendor": "elytrabooster authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
